<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Salogs By Yousri</title>
    <description>A blog about Salogs</description>
    <link>salogs.yousri.org</link>
    <atom:link href="salogs.yousri.org/feed.xml" rel="self" type="application/rss+xml" />
    
      <item>
        <title>Weekly-notes-at-2014-01-06</title>
        <description>&lt;h2&gt;2014 年第一周&lt;/h2&gt;

&lt;p&gt;上月底在豆瓣上某篇评论最后看到这么一句话&amp;mdash;“把要做的事情想清楚，把想好的事情做出来，把做过的事情写下来”，让自己产生一个想法接下来一年让自己尝试能坚持做到这样。争取每周或每月记录日常所遇所学问题。&lt;/p&gt;

&lt;h2&gt;LVS 工作模式&lt;/h2&gt;

&lt;h3&gt;翻阅&lt;a href=&quot;http://weibo.com/benjiaming1981&quot;&gt;@吴佳明_普空&lt;/a&gt; 分享的&lt;a href=&quot;http://adc.alibabatech.org/ppts/up-1341918098-0.pdf&quot;&gt;关于LVS在淘宝环境中的应用&lt;/a&gt;笔记&lt;/h3&gt;

&lt;p&gt;如今最常用的基本是LVS-DR模式，但其存在一定安&amp;amp;局限性问题，全部对外暴露：集群vip不仅配置在LVS机器，而且后端RealServer也需要绑定集群vip；而且网络要求还需要在同一个Vlan局域网内。LVS-NAT模式虽说可以解决这问题，但其自身存在需配置路由复杂且维护成本高及性能易受影响&lt;/p&gt;

&lt;p&gt;淘宝在原生基础上综合新增了LVS-FULLNAT模式，在NAT模式的基础做了些相应改进，将客户端源包全部转化成LVS local源包与RealServer通信。具体原理可见来自其PPT：（这里存在一个问题：RealServer看不到实际客户端来源信息，全部都是变成来自LVS local的&amp;#39;客户端&amp;lsquo;源，所以要查看到还需要RealServer内核上打淘宝提供的补丁，而且内核要求相对较新2.6.32这2点比较麻烦）&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://yousri-pic.b0.upaiyun.com/lvs-fullnat.png&quot; alt=&quot;LVS-FULLNAT工作原理&quot;&gt;&lt;/p&gt;

&lt;p&gt;具体安装使用结合官网说明对于  &lt;a href=&quot;http://kb.linuxvirtualserver.org/wiki/IPVS_FULLNAT_and_SYNPROXY&quot;&gt;IPVS FULLNAT and SYNPROXY&lt;/a&gt; 的介绍 ，后来回头再看了遍之前在小米运维部的NoOPS博客见到那篇&lt;a href=&quot;http://noops.me/?p=974&quot;&gt;LVS-ospf集群&lt;/a&gt;（可以说是LVS NAT Cluster的实现吧），总算理解。&lt;/p&gt;

&lt;p&gt;通过细细翻阅分享的这话题让自己算是重新对整个LVS各工作模式情况更清晰理解，同时只想说各种工作模式好多，各大公司真是量大牛逼啊！（其实普通公司通常基本模式就够用或单FULLNAT模式足矣，基本不需动用到交换机ospf，配置什么Quagga这东西啊），没想到单单一个LVS的工作模式自己如今了解到就有：原版的 NAT/DR/TUN，淘宝新增的FULLNAT / SYNPROXY，小米的DSNAT，百度?的BigNAT，腾讯的TWG?! 其他未知的&lt;/p&gt;

&lt;hr&gt;

&lt;h3&gt;By the way&lt;/h3&gt;

&lt;p&gt;其中这PPT里对于 FULLNAT 设计考虑部分中提及到 RealServer kernel 开启 tcp&lt;em&gt;tw&lt;/em&gt;recycle 用户A和B，timestamp 大癿访问成功，timestamp 小癿访问失败的问题中，曾两次帮我顺利快速的解决来自开发同事@lfeng 和@belltoy 反馈的两个问题：关于公司访问CRM慢疑似被&amp;#39;重置&amp;#39;现象；垮IDC机房访问建立连接TCP数据包传输异常。其实两次共同点：通过NAT网关（1个出口ip）访问同一服务（前者出口都是公司公网IP；后者都是走同一台机器路口出去），都是因TCP时间戳及所谓系统内核优化参数配置有关引起，详细分析解释 &amp;mdash; &lt;a href=&quot;http://blog.sina.com.cn/s/blog_781b0c850100znjd.html&quot;&gt;tcp_tw_recycle和tcp_timestamps导致connect失败问题&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;所以其实未搞清楚搞懂TCP和所谓Linux内核，确实不能随便网上轻易随意copy什么内核优化参数啊，不一定是对的，不一定是适合你的。同样道理，不是安装使用上随随便便出个分析报告，说自己研究过，熟悉熟练啥的。&lt;/p&gt;

&lt;h2&gt;TCPCopy工具使用&lt;/h2&gt;

&lt;hr&gt;

&lt;h3&gt;个人感触&lt;/h3&gt;

&lt;p&gt;刚开始每次要使用TCPCopy时，都总为找适合像自己这样新手菜鸟操作使用帮助文档而烦恼（可能自身对其深藏的功能/参数尚不够了然），第一感觉牛人都有喜欢只谈架构原理设计说明的习惯么，而不屑站在菜鸟使用立场考虑下实际基本操作帮助文档说明么？&lt;/p&gt;

&lt;p&gt;后来发现是自己土鳖错了，应该首选看英文文档，比中文版来得更详细清晰易理解，看来技术这东西还确认应该看英文版，自以为是国人开源的产品中文文档可能会更易懂，没想到作者可谓达到高大上档次的国际范（可能技术的东西英文描述起来更容易理解的缘故吧）&lt;/p&gt;

&lt;hr&gt;

&lt;h3&gt;使用方法&lt;/h3&gt;

&lt;p&gt;支持多种测试模式&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;    --enable-debug      &lt;span class=&quot;c&quot;&gt;#compile TCPCopy with debug support (saved in a log file)&lt;/span&gt;
    --enable-mysqlsgt   &lt;span class=&quot;c&quot;&gt;#run TCPCopy at mysql skip-grant-tables mode&lt;/span&gt;
    --enable-mysql      &lt;span class=&quot;c&quot;&gt;#run TCPCopy at mysql mode&lt;/span&gt;
    --enable-offline    &lt;span class=&quot;c&quot;&gt;#run TCPCopy at offline mode&lt;/span&gt;
    --enable-thread     &lt;span class=&quot;c&quot;&gt;#run TCPCopy server (intercept) at multi-threading mode&lt;/span&gt;
    --enable-nfqueue    &lt;span class=&quot;c&quot;&gt;#run TCPCopy server (intercept) at nfqueue mode &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;这里有个麻烦就是，要不同测试模式，都需要重新编译一次TCPCopy二进制支持，这个以用户的角度应该是一次编译多次多种使用，具体由程序内部控制区分开发选择的不同参数不同测试模式。就如@timebug 所言：“其实如果非要这样的话，应该选择让用户安装一次，然后通过 bash 或者其他封装一下不同二进制，这样用户使用起来就方便了 ./tcpcopy -type xxx 类似的”&lt;/p&gt;

&lt;hr&gt;

&lt;h4&gt;测试服务器Target Server 配置&lt;/h4&gt;

&lt;p&gt;基本步骤：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;加载模块&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;    modprobe ip_queue&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;设置iptables拦截TCP包&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;    iptables -I OUTPUT -p tcp --sport 3130 -j QUEUE &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;启动接收包服务端&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;    /usr/local/sbin/intercept -d&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;其中 intercept 常用参数使用说明：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;    -x ip,ip 授权可直接访问测试服务器自身服务（不然前面设置被拦截掉）
    -b &amp;lt; ip_addr &amp;gt; 指定服务监听的IP地址，默认监听所有 0.0.0.0
    -d  后台运行&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;hr&gt;

&lt;h4&gt;线上服务器Source Server 配置&lt;/h4&gt;

&lt;p&gt;基本使用：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;    /usr/local/sbin/tcpcopy &lt;span class=&quot;p&quot;&gt;&amp;amp;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;tcpcopy 常用参数使用说明：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;    -x sourceIP:sourcePort-targetIP:targetPort,...  &lt;span class=&quot;c&quot;&gt;#服务器ip:端口-测试服务器ip:端口,...支持多服务copy&lt;/span&gt;
    -i file  &lt;span class=&quot;c&quot;&gt;#保留TCP数据包，离线copy，enable-offline模式下&lt;/span&gt;
    -n number &lt;span class=&quot;c&quot;&gt;#放大线上流量多少倍到测试服务器，最大 1023&lt;/span&gt;
    -r number &lt;span class=&quot;c&quot;&gt;#引线上多少比例的流量到测试服务器上(数值范围:1~100)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;hr&gt;

&lt;h4&gt;TCPCoy 间接功能&lt;/h4&gt;

&lt;p&gt;在查找TCPCopy使用帮助过程，无意间看到这篇文章 &amp;mdash; &lt;a href=&quot;http://globaldev.co.uk/2013/01/migrating-memcached/&quot;&gt;Migrating memcached&lt;/a&gt; 其一方面借助tcpcopy引流测试外，另一方面还间接起到预热 memcached 的效果。自己不由产生之前琢磨怎么有效的对数据库做预热的困惑可谓有解 &amp;mdash; 借助tcpcopy引流功能；支持 MySQL 服务，来对数据库 MySQL 的InnoDB内存池做线下预热操作，相比其他预热方式看似来得更靠谱些，因为其是引用线上真实生产环境请求过来的相当于用户直接的访问。&lt;/p&gt;

&lt;p&gt;看来TCPcopy不仅让测试更真实，让开发更大胆调试，让运维更方便操作，看来后续还有可能尝试着拿来作为类似 Cache 功能的预热工具啊。&lt;/p&gt;

&lt;h2&gt;运维工具&lt;/h2&gt;

&lt;p&gt;13年9月份自己曾在微博感慨过点愚见：工具终究是辅助，自动化快速轻松的前提是先需要将服务标准化规范化服务化，及对业务服务了然于心后积累成型的。同时面对实际问题的定位分析解决才是更关键吧，否则最终只能说是个操作员吧。&lt;/p&gt;

&lt;p&gt;个人分别体验使用过salt和ansible两者工具后，最大的感受未来基本趋势是：Salt其强大确实更偏向走系统化路线，是作为服务状态/配置管理维护的首选，加上其拥有齐全的api接口更易按需定制成平台化吧（同样具备后者实时管理等功能）；而相对而言ansible比较适用于日常实时操作管理/维护发布部署。&lt;/p&gt;

&lt;hr&gt;

&lt;h2&gt;兴趣与态度&lt;/h2&gt;

&lt;p&gt;&amp;ldquo;如果一个人对所做的事情感兴趣，那么自然愿意投入时间，与是否工作无关，与是否IT行业无关。&amp;rdquo;&lt;/p&gt;

&lt;p&gt;说到心坎上，只有兴趣的东西才是长久的，技术能力其实并非是最关键，态度/责任更胜一切，最近半年最大的感受是：有心学习搞懂搞明白其实技术也就那么回事而已，遇到问题用心弄清楚后便会发现并不是想象中那么神秘，而兴趣/态度/责任完全不是靠培养学习能成就的。&lt;/p&gt;

&lt;h2&gt;Want To Do&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;重拾iptables&lt;/li&gt;
&lt;li&gt;TCP协议/网络规划&lt;/li&gt;
&lt;li&gt;MySQL参数整理/监控&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Mon, 06 Jan 2014 22:13:00 +0800</pubDate>
        <link>salogs.yousri.org/2014/01/06/weekly-notes/</link>
        <guid isPermaLink="true">salogs.yousri.org/2014/01/06/weekly-notes/</guid>
      </item>
    
      <item>
        <title>关于近阶段对MySQL维护中学习小结</title>
        <description>&lt;h2&gt;前奏感触&lt;/h2&gt;

&lt;hr&gt;

&lt;p&gt;最近一段时间无证上岗充当 DBA 临时工接触 MySQL 一些维护操作，总体感觉挺好，时常能够遇到&amp;lsquo;新&amp;#39;问题&amp;#39;挑战&amp;#39;，所以边尝试边学习边查手册，边请教专业的同事朋友边和小伙伴们闲聊分享新发现，有种自己刚毕业入社会那会入门运维的感觉。DBA确实感觉挺好，有意思有挑战，唯一不好的一点就是：个人感觉很多都得在夜里才能操作维护。说来也惭愧自己不是真正计算机类毕业的如今却实打实的干着IT基础服务这行，所以就自己而言，更多涉及广度缺少深度（系统的学习深入的研究），遇到问题时排查原因分析定位基本都还不成问题，至于解决方案措施有时即便有思路有想法却也很容易比较没了底气自信，所以没优势，这样通常也不易被看好看重。&lt;/p&gt;

&lt;p&gt;在维护 MySQL 过程中，前前后后遇到几次坑及个人困惑，也此处理过程了解些使用 MySQL 数据库过程可能需要留意的几个地方，简单记录下希望对后来人或像自己这样的临时工有所帮助吧。至于那些关于 MySQL 主从、主主、还是主主各带从的关系这里不多记录，基本就都那样。&lt;/p&gt;

&lt;h2&gt;MySQL 使用考虑点&lt;/h2&gt;

&lt;hr&gt;

&lt;h3&gt;一、MySQL平台环境选择&lt;/h3&gt;

&lt;hr&gt;

&lt;p&gt;MySQL平台环境：硬件、系统等&lt;/p&gt;

&lt;h4&gt;硬件：&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;CPU&lt;/li&gt;
&lt;li&gt;内存：尽可能的大，主要是InnoDB中有个内存池 innodb_buffer_pool ，尽量将热数据预加载保存在内存里以便尽量多的从内存里读取数据。&lt;/li&gt;
&lt;li&gt;磁盘：提供磁盘 I/O 读写速度性能，SSD现在很普遍，有钱的都上FusionIO，SSD可使用Raid 如：系统分区可选Raid1，数据分区则用Raid10的。&lt;/li&gt;
&lt;li&gt;d网卡：低延迟，传输/同步&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;系统环境：&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;EXT4 / XFS / Btrfs（这个目前应该还不很少用线上吧）&lt;/li&gt;
&lt;li&gt;I/O调度算法：deadline&lt;/li&gt;
&lt;/ol&gt;

&lt;hr&gt;

&lt;h3&gt;二、MySQL 自身配置&lt;/h3&gt;

&lt;hr&gt;

&lt;p&gt;存储引擎选择，目前基本都是InnoDB引擎，或者各大公司基于InnoDB基础按需二次开发，所以就以个人这段时间在InnoDB引擎下遇到的几个问题来描述&lt;/p&gt;

&lt;h4&gt;1、共享表空间与独享表空间的选择（最好事先选择好，建议独立表空间性能且不说就方便维护）&lt;/h4&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;    &lt;span class=&quot;nv&quot;&gt;innodb_file_per_table&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;hr&gt;

&lt;h4&gt;2、InnoDB 内存池：将数据尽量多的保存在内存里，更多的减少磁盘读写操作，提供性能。&lt;/h4&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;    &lt;span class=&quot;nv&quot;&gt;innodb_buffer_pool_size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 80% * Memory&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;InnoDB 内存池这东西有个需要注意就是：数据库新启动或重启，内存会被自动释放，所以都需要重新进行数据预热，将磁盘上的所有数据缓存到内存中，这个时候数据库压力负载都会异常的飙升，特别如果是在访问请求量高峰时，可能直接引发崩溃，这个自己在最后一次维护没留意就采坑中招了。详见下面两台分别是被重启过和线上的innodb_buffer_pool相关的配置信息区别： Innodb_buffer_pool_pages_free 值便是内存池空闲页面数，第一个是刚重启起来所以很多都尚未预热，第二个是线上服务已经为0即所有的innodb_buffer_pool都已经使用上。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;    mysql&amp;gt; SHOW GLOBAL STATUS LIKE &lt;span class=&quot;s1&quot;&gt;&amp;#39;%innodb_buffer_pool_pages%&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    +---------------------------------------+-------------+
    &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; Variable_name                         &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; Value       &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;
    +---------------------------------------+-------------+
    &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; Innodb_buffer_pool_pages_data         &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; 2209585     &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; Innodb_buffer_pool_pages_dirty        &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; 147528      &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; Innodb_buffer_pool_pages_flushed      &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; 1953689     &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; Innodb_buffer_pool_pages_free         &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; 2484453     &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; Innodb_buffer_pool_pages_misc         &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; 24553       &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; Innodb_buffer_pool_pages_total        &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; 4718591     &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;
    +---------------------------------------+-------------+
    6 rows in &lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0.00 sec&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    
    mysql&amp;gt; SHOW GLOBAL STATUS LIKE &lt;span class=&quot;s1&quot;&gt;&amp;#39;%innodb_buffer_pool_pages%&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    +---------------------------------------+---------------+
    &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; Variable_name                         &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; Value         &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;
    +---------------------------------------+---------------+
    &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; Innodb_buffer_pool_pages_data         &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; 4545938       &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; Innodb_buffer_pool_pages_dirty        &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; 96512         &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; Innodb_buffer_pool_pages_flushed      &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; 1609426350    &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; Innodb_buffer_pool_pages_free         &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; 0             &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; Innodb_buffer_pool_pages_misc         &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; 172653        &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; Innodb_buffer_pool_pages_total        &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; 4718591       &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;
    +---------------------------------------+---------------+
    6 rows in &lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0.00 sec&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;至于如何加快预热速度，Google了下有各种方法，要么是限制于XtraDB要么是要基于二次开发的引擎上，文章可见&lt;a href=&quot;http://www.mysqlsystems.com/2011/07/quickly-warm-up-innodb-buffer-pool.html&quot;&gt;快速预热Innodb Buffer Pool的方法&lt;/a&gt;。个人愚见感觉即便模拟访问也不是很靠谱，因为模拟的东西本身和用户访问不太一致，不可能把磁盘数据都写入到内存里，因为这个内存池大小有限。&lt;/p&gt;

&lt;p&gt;据说 MySQL5.6 版本支持在正常关闭服务的情况下支持事先做好预热备份的配置，相应配置（摘自网络,个人暂未测试）&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;    &lt;span class=&quot;nv&quot;&gt;innodb_buffer_pool_dump_at_shutdown&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 1  &lt;span class=&quot;c&quot;&gt;#在关闭时把热数据dump到本地磁盘。&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;innodb_buffer_pool_dump_now&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 1      &lt;span class=&quot;c&quot;&gt;#采用手工方式把热数据dump到本地磁盘。&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;innodb_buffer_pool_load_at_startup&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 1   &lt;span class=&quot;c&quot;&gt;#在启动时把热数据加载到内存。&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;innodb_buffer_pool_load_now&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 1      &lt;span class=&quot;c&quot;&gt;#采用手工方式把热数据加载到内存。&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;在关闭MySQL时，会把内存中的热数据保存在磁盘里ib_buffer_pool文件中，位于数据目录下。&lt;/p&gt;

&lt;hr&gt;

&lt;h4&gt;3、磁盘写入操作调节&lt;/h4&gt;

&lt;p&gt;问题：临时从线上配置从库准备作为导数据用的时遇到同步严重延迟的现象&lt;/p&gt;

&lt;p&gt;定位：同步追了一晚上发现 Seconds_Behind_Master 数值还是有点出乎的大，事先对MySQL 不熟所以只能怀疑延迟，网上查了下发现这个值是：SQL thread 与 I/O thread 之间的差值(摘自&lt;a href=&quot;http://hi.baidu.com/ytjwt/item/02ebd0c0811f3952bcef690a&quot;&gt;Seconds_Behind_Master 解析&lt;/a&gt;)，有两种情况可能会引起这个大差值：网络延迟或执行写入I/O压力；看了下 master 的 binlog 都是很快传递到 slave 上且加上从库服务器磁盘I/O确实超负荷（虽然写入数据不大却过于频繁原因，留一个疑问：不知当时的读写频率次数是多少），为了更确切的确定，在&lt;a href=&quot;http://weibo.com/nettedfish&quot;&gt;@nettedfish&lt;/a&gt;的指点帮助下&amp;quot;在主库的对应db上，临时创建一个heartbeat 表，插入时间戳，在从库上，过一段时间取出来，与当前的时间戳想比较下&amp;quot;，确实如show slave status\G;显示的延时那时长。&lt;/p&gt;

&lt;p&gt;解决：反馈给老大，很快指点自己试着将 innodb_flush_log_at_trx_commit 由线上的配置为 1 临时改为 0，因为考虑是临时作为迁移导数据用的从库，不是线上生产环境影响不大，果然让其自动定期写入磁盘，效果明显：很快便追上同步且磁盘负荷恢复正常。&lt;/p&gt;

&lt;p&gt;查证：这个参数原来对于磁盘读写性能影响甚大啊&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;    &lt;span class=&quot;nv&quot;&gt;innodb_flush_log_at_trx_commit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 0   &lt;span class=&quot;c&quot;&gt;#不write()，也不fsync()。每秒同时执行一次write()和fsync();&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;innodb_flush_log_at_trx_commit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 1   &lt;span class=&quot;c&quot;&gt;#同步IO,确定将redo log同步写入磁盘，即write()，又fsync().&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;innodb_flush_log_at_trx_commit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 2   &lt;span class=&quot;c&quot;&gt;#只write()，不fsync()，即不确认写入磁盘，可能还在OS page cache&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;注：
* write():用户态进程mysqld内存空间log buffer pool的数据复制到内核态线程内存空间中(即page cache),此时,日志数据并没有写至磁盘设备,
* fsync():才会把页面缓存中的日志数据同步到磁盘设备上&lt;/p&gt;

&lt;p&gt;由此可见：
1. 设置为1,易产生大量同步I/O操作。每次同步I/O操作，都会阻止I/O调用，直到数据被真正写回磁盘(写磁盘较写内存慢很多)，这样就会显著地降低InnoDB每秒可以提交的事务数。
2. 设置为0或2,意味着更少的调用fsync(),最多有可能会丢失1s的事务，所以对事务要求不高业务环境下，其实完全可以设置值2,甚至值0来减少事务引起的磁盘I/O。&lt;/p&gt;

&lt;p&gt;Ps:后来意识到那些监控 MySQL 主从同步是否延时是不是就是根据查看 Seconds_Behind_Master 这个值来确定的呢?!&lt;/p&gt;

&lt;p&gt;其实关于磁盘读写操作相关的还有个参数是：sync_binlog &amp;mdash; InnoDB同步bin log至磁盘的频率&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;    &lt;span class=&quot;nv&quot;&gt;sync_binlog&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 0      &lt;span class=&quot;c&quot;&gt;#默认值是0。不调用fsync()，依赖于OS调度。&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;sync_binlog&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 1      &lt;span class=&quot;c&quot;&gt;#每次commit，都要求进行一次fsync()同步I/O操作。&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;hr&gt;

&lt;h4&gt;4、定期分析表，回收空间，间接优化表性能&lt;/h4&gt;

&lt;p&gt;InnoDB 引擎数据即便删除也不会被自动释放，所以如果用共享表空间那似乎意味需要定期重导数据操作?！对于独立表空间虽然delete操作同样不会回收已用空间，但至少还可以通过定期分析表，实现手动回收。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;    optimize NO_WRITE_TO_BINLOG table tablename&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;需要注意的是：
1. optimize执行过程会锁表，最好在slave上执行;
2. optimize表分析实质是先将所有数据导入到新的innodb文件中，所以数据分区空余空间必须要大于该表文件
3. optimize命令默认会写入binlog同步到其从库，所以需要加参数 NO_WRITE_TO_BINLOG&lt;/p&gt;

&lt;hr&gt;

&lt;h4&gt;5、剩下的估计开发比较清楚&lt;/h4&gt;

&lt;p&gt;其他注意事项：
1. a定期分析慢查询日志;
2. b必要选择建立索引;&lt;/p&gt;

&lt;p&gt;参考文档：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.mysqlperformanceblog.com/2006/09/29/what-to-tune-in-mysql-server-after-installation/&quot;&gt;What to tune in MySQL Server after installation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.mysqlperformanceblog.com/2007/11/03/choosing-innodb_buffer_pool_size/&quot;&gt;Choosing innodb_buffer_pool_size&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 21 Dec 2013 22:30:00 +0800</pubDate>
        <link>salogs.yousri.org/2013/12/21/mysql-tips/</link>
        <guid isPermaLink="true">salogs.yousri.org/2013/12/21/mysql-tips/</guid>
      </item>
    
      <item>
        <title>工作随记</title>
        <description>&lt;h2&gt;身心体会&lt;/h2&gt;

&lt;hr&gt;

&lt;p&gt;确实啊，这近一个月来就自己而言跟打战似的，各种忙碌、通宵熬夜导数据。前要盯流量看监控，后要顾集群服务存储兼干DBA活；左边答疑技术支持，右边请教开发确认机制；对外细到服务销售/客户上传数据，对内还需受命服务于两边项目；说白基本是“白天作战UpYUN，晚上转移Huaban”、“白天要跑机房，晚上得理配置，半夜上岗无证DBA临时工”的节奏一点不够分。其实领导会上所言的关于老大事情交接，其实不过是岗位的交接罢了，某种程度并不包括工作内容任务。&lt;/p&gt;

&lt;p&gt;这样也不算什么坏事…而且也不是说仅仅是忙累而才不爽。小公司就是这么点优势&amp;mdash;只要主动多去参与你就可以学习更多积累更多。其实不爽的地方关键在于：那些整天喊着“共同创业，共事”的领导们就只会口头忽悠说着些多好听的话，而实际上对于员工而言基本是看不到自己所创造的价值所在（最基本的业务销售情况无人知晓）；做基础服务不舍得投入基础设施，一心只想考虑看要在技术人/程序服务上榨干所有，倒是很舍得投入找来各种摆饰好看撑场面的“展示品”，需要有这样的阶段没错，但关键至少目前还没到吧！如今一定程度上必备基本的容量规划预估是值得考虑，多少次都是被动的等项目迫在眉睫才到处要资源的，适当的冗余备置批资源想必还抵不上一个“展示品”一个月的费用吧?！&lt;/p&gt;

&lt;p&gt;身为领导们很正常的一贯都只喜好那些好被自己降服、唯命是从、时刻追随自己等方面的人。可惜自己情商低下，属比较不正常的另类，言论随心、直言不讳、单刀直入、不降服于任何人，不想压抑内心不爽、不想虚假处事，只想做真实自己，哪怕自己知晓这样最终受伤的是自己。&lt;/p&gt;

&lt;p&gt;其实就公司目前而言，管理方式及氛围而言都相当令人不敢苟同啊。&lt;/p&gt;

&lt;p&gt;最后，只能用朋友曾给的一条共勉评论&amp;mdash;“要么忍，要么滚”来终结身心体会，以这样方式记录下自己人生的点滴就好。&lt;/p&gt;

&lt;h2&gt;无证上岗DBA临时工&lt;/h2&gt;

&lt;hr&gt;

&lt;p&gt;毕业至今多年，经历过的几家公司部门貌似都没有专职的DBA这岗位角色，可能自己处过都是小公司吧，这样的好处就是运维可以负责兼顾DBA维护的角色，学习到更多实战东西，之前在厦门就是如此，可惜自从来杭州后新接触更多是CDN的东西，所以后端DB基本就没再碰过，没想到这近一个月来能再次捡起几次熬夜都和数据库维护有关啊。&lt;/p&gt;

&lt;p&gt;主要包括是 MySQL 维护及版本升级以及 Redis 服务实例的迁移分离，都是由于业务规模的速度增长而做的完善或扩充：MySQL 之前配置考虑不够周到及业务量增长触发到版本的某个BUG；花瓣 Redis 集群服务内存告警做相应的扩容迁移分离。&lt;/p&gt;

&lt;h3&gt;MySQL维护记录：共享表空间&amp;ndash;&amp;gt;独享表空间;版本升级5.5.19&amp;ndash;&amp;gt;5.5.31&lt;/h3&gt;

&lt;hr&gt;

&lt;h4&gt;共享表空间&amp;mdash;&amp;gt;独享表空间&lt;/h4&gt;

&lt;hr&gt;

&lt;p&gt;上次迁移更新数据库还是一年多前，当时自己就只负责安装配置数据库所需的平台环境（回想起那时都是泪啊！），至于 MySQL 的参数配置还是老大来，当时也没有考虑太周到，采取的是共享表空间方式。（时间的推移发现磁盘空间回收释放成一个问题），故决定重整调整配置开启设置使用独享表空间，方便后续对单表做表分析回收释放空间。（采用重新导出导入数据方式来做变更），主要配置修改：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;    vi /etc/my.cnf
    &lt;span class=&quot;nv&quot;&gt;innodb_file_per_table&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;至于共享表空间和独享表空间的比较，个人无权评论，因为自己是个无证上岗的DBA临时工，建议可以请教相关专职DBA或也可以看看&lt;a href=&quot;http://www.iamcjd.com/?p=1294&quot;&gt;MySQL 独立表空间 VS 共享表空间&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;升级 MySQL 数据库版本：5.5.19&amp;mdash;&amp;gt;5.5.31&lt;/h4&gt;

&lt;hr&gt;

&lt;p&gt;当时主要有2个疑问需事先确认：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;a数据需不需要重新导出导入&lt;/li&gt;
&lt;li&gt;b升级后同现有的相对较低版本与升级后高版本的同步兼容性问题&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;为了确认验证上面这两个问题，找了2台之前下线的服务器（事先已经有部署有 MySQL5.5.19版本）做了下基本逻辑的测试：对于第一个问题，测试大致&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;安装部署新版本 MySQL5.5.31&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;    tar zxf mysql-5.5.31-linux2.6-x86_64.tar.gz
    /usrl/local/mysql/bin/mysqladmin -uroot -p shutdown &lt;span class=&quot;c&quot;&gt;#关闭旧版本MySQL服务&lt;/span&gt;
    mv /usr/local/mysql /usr/local/mysql5.5.19
    mkdir /usr/local/mysql
    mv mysql-5.5.31-linux2.6-x86_64/* /usr/local/mysql/
    mkdir /usr/local/mysql/log
    chown -R mysql.mysql /usr/local/mysql&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;启动新版本 MySQL 服务&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;    /usr/local/mysql/bin/mysqld_safe --user&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;mysql&lt;span class=&quot;p&quot;&gt;&amp;amp;&lt;/span&gt;

    mysql&amp;gt; &lt;span class=&quot;k&quot;&gt;select &lt;/span&gt;version&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    +------------+
    &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; version&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;
    +------------+
    &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; 5.5.31-log &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;
    +------------+
    1 row in &lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0.00 sec&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;执行 mysql_upgrade 调整修复数据兼容性 （按规范流程来做事）&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;    &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;root@hadoop01 &lt;span class=&quot;nb&quot;&gt;local&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;# /usr/local/mysql/bin/mysql_upgrade -uroot -p&lt;/span&gt;
    Enter password:
    Looking &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;mysql&amp;#39;&lt;/span&gt; as: /usr/local/mysql/bin/mysql
    Looking &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;mysqlcheck&amp;#39;&lt;/span&gt; as: /usr/local/mysql/bin/mysqlcheck
    Running &lt;span class=&quot;s1&quot;&gt;&amp;#39;mysqlcheck&amp;#39;&lt;/span&gt; with connection arguments: &lt;span class=&quot;s1&quot;&gt;&amp;#39;--port=3306&amp;#39;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;--socket=/tmp/mysql.sock&amp;#39;&lt;/span&gt;
    Running &lt;span class=&quot;s1&quot;&gt;&amp;#39;mysqlcheck&amp;#39;&lt;/span&gt; with connection arguments: &lt;span class=&quot;s1&quot;&gt;&amp;#39;--port=3306&amp;#39;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;--socket=/tmp/mysql.sock&amp;#39;&lt;/span&gt;
    mysql.columns_priv                                 OK
    mysql.db                                           OK
    mysql.event                                        OK
    mysql.func                                         OK
    mysql.general_log                                  OK
    mysql.help_category                                OK
    mysql.help_keyword                                 OK
    mysql.help_relation                                OK
    mysql.help_topic                                   OK
    mysql.host                                         OK
    mysql.ndb_binlog_index                             OK
    mysql.plugin                                       OK
    mysql.proc                                         OK
    mysql.procs_priv                                   OK
    mysql.proxies_priv                                 OK
    mysql.servers                                      OK
    mysql.slow_log                                     OK
    mysql.tables_priv                                  OK
    mysql.time_zone                                    OK
    mysql.time_zone_leap_second                        OK
    mysql.time_zone_name                               OK
    mysql.time_zone_transition                         OK
    mysql.time_zone_transition_type                    OK
    mysql.user                                         OK
    Running &lt;span class=&quot;s1&quot;&gt;&amp;#39;mysql_fix_privilege_tables&amp;#39;&lt;/span&gt;...
    OK&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;后来了解到 mysql_upgrade 这命令所做的事情主要是包括：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;mysqlcheck –check-upgrade –all-databases –auto-repair&lt;/li&gt;
&lt;li&gt;mysql_fix_privilege_tables&lt;/li&gt;
&lt;li&gt;mysqlcheck –all-databases –check-upgrade –fix-db-names –fix-table-names&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;故是建议每一次的升级过程中，mysql_upgrade这个命令最好也应该去执行，通过mysqlcheck命令检查表是否兼容新版本的数据库同时作出修复，还有个很重要的作用就是使mysql_fix_privilege_tables命令去升级权限表。&lt;/p&gt;

&lt;p&gt;更多详细升级帮助说明详见：&lt;a href=&quot;http://dev.mysql.com/doc/refman/5.5/en/upgrading.html&quot;&gt;MySQL 官网升级文档&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;对于第二个疑问：升级后同现有的相对较低版本间的同步兼容性问题，做如下测试：&lt;/p&gt;

&lt;p&gt;先在刚刚已经升级的 MySQL 版本为5.5.31 server1 和先前下架但未升级版本对应 MySQL 版本为5.5.19 的server2，这 2 台配置为互为主主。测试如下操作：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;在 server1 的 test 库创建一张表 t1 字段为 id / name ，查看 server2 上的 test 库表情况，正常；&lt;/li&gt;
&lt;li&gt;在 server1 刚创建的 t1 表 插入一条记录 ，到 server2 上查询，结果正常；&lt;/li&gt;
&lt;li&gt;在 server2 上删除刚刚在 server1 上插入的记录，到 server1 上查看，结果正常；&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;查看前后 slave status 变化是否正常，MySQL自身log日志记录情况，可以判断确定同步疑问也是没问题的。&lt;/p&gt;

&lt;p&gt;注：随手分享篇关于 &lt;a href=&quot;http://www.mysqlperformanceblog.com/2013/12/07/linux-performance-tuning-tips-mysql/&quot;&gt;Linux performance tuning tips for MySQL&lt;/a&gt;&lt;/p&gt;

&lt;hr&gt;

&lt;h3&gt;Redis 实例分离迁移&lt;/h3&gt;

&lt;hr&gt;

&lt;p&gt;Redis目前还没有成熟的集群方案，虽说2.8版本已经支持且标记为Stable版本，但一直还是处于更新迭代阶段，拿来线上环境使用还是显得不是很靠谱，个人的看法是：适当追新是应该的没错，但感觉还是不要太够于激进追新，那样只会是更冒险且是小白鼠吧。这次迁移分离主要是随Huaban项目redis服务内存占用增长使得之前每台分配的实例数显得紧张，到了必要的扩容分离处理（不大不小阶段吧）。主要备录几点刚接触过程了解到的点：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;迁移分离方式&amp;ndash;复制功能，一定要用到内存快照，所以需要充当master库所在服务器相等量的内存容量闲置;&lt;/li&gt;
&lt;li&gt;master和slave断开后重新建立连接都得重新完整的将整个快照做一次同步传输，没有类似MySQL的位置标记概念（增量备份）;&lt;/li&gt;
&lt;li&gt;从2.6版本后，slave角色默认是开启只读的，这个如果没有事先使用 config set slave-read-only no 关闭的话，在做分离迁移完后应用端切换到新的上面后，会遇到 redis slave read only 的提示，以致新的写入失败丢失;&lt;/li&gt;
&lt;li&gt;确保本地磁盘空间足够（基本不会遇到但是不好说），因为内存快照过程redis进程是会dump一份临时的temp.rdb文件到磁盘再传输到slave服务器上加载进内存中，如果master磁盘不足的话会出现快照恶性循环失败启动新的slave进程;&lt;/li&gt;
&lt;li&gt;so,用前需要事先做好业务的预估容量规划及后期的扩容问题。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;还是那句话，个人始终只是临时工就只了解些外表的一些皮毛而已，对于看得懂源码的人想了解可以读读源码去，哈哈。这里随手分享一两篇个人觉得写得不错的牛人微博或文章大家可以看看&amp;mdash;&lt;a href=&quot;http://weibo.com/1779195673/zF0tmG4fT8&quot;&gt;田琪的微博&lt;/a&gt;和&lt;a href=&quot;http://www.cnblogs.com/chenying99/archive/2012/06/14/2548730.html&quot;&gt;Redis复制与可扩展集群搭建&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;最近还尝试接触了个新老玩意&amp;mdash;&lt;a href=&quot;https://code.google.com/p/tcpcopy/&quot;&gt;TCPCopy&lt;/a&gt;&lt;/p&gt;

&lt;hr&gt;

&lt;h2&gt;不忘生活&lt;/h2&gt;

&lt;hr&gt;

&lt;p&gt;工作在忙在累，也不能忘周末的休闲骑行生活，工作最终都是为了享受生活，故不能忘。就如自己的一个愿望是：哪一天可以申请回老家乡下远程办公，看似很简单的愿望却至今未能遇到有一家公司肯批准（很多都觉得不放心、会偷懒；成为特例影响他人，但自己要求想法就是如此另类，因为个人觉得完全没任何问题。）所以一直坚持着和小伙伴们一起踩着脚踏车到周边游逛。有骑行随记图文有证据分享，如：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://www.omoway.com/2013/11/riding-life-to-wurencun/&quot;&gt;萧山无人村挑战盘山而上&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.omoway.com/2013/11/riding-life-to-yangjiacun-for-yinxing/&quot;&gt;奔杨家赏银杏&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.omoway.com/2013/11/riding-life-to-ganling-and-changle/&quot;&gt;甘岭水库，长乐林场&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;近年来各地污染指数各种爆表，搞得本来要去徒步爬山都不能……&lt;/p&gt;
</description>
        <pubDate>Sat, 14 Dec 2013 19:30:00 +0800</pubDate>
        <link>salogs.yousri.org/2013/12/14/life-with-the-mind/</link>
        <guid isPermaLink="true">salogs.yousri.org/2013/12/14/life-with-the-mind/</guid>
      </item>
    
      <item>
        <title>Nginx无缝升级及其自带信号处理</title>
        <description>&lt;p&gt;任何一种服务版本或插件升级都需要考虑最佳状态的无缝过渡升级（不影响任何请求服务的中断且无需人员的干涉）&lt;/p&gt;

&lt;p&gt;对于 Nginx 其进程管理模式及其自带各种信号处理可以很好的控制管理 master 和 work 进程。之前用得相对比较多的基本只是修改 Nginx 配置文件后使用到 ‘HUP’ 信号处理方式来重新加载配置文件，但其实 Nginx 还有很多其他信号可以用于控制对其进程（不管是 master 或 work）做相应不同的处理的，详见官方 wiki：&lt;a href=&quot;http://wiki.nginx.org/NginxCommandLine/&quot;&gt;NginxCommandLine&lt;/a&gt;&lt;/p&gt;

&lt;h5&gt;对于 Master 管理进程而言：&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;ERM, INT（暴力结束进程，当前的请求不执行完成就退出）&lt;/li&gt;
&lt;li&gt;QUIT （优雅退出，执行完当前的请求后退出）&lt;/li&gt;
&lt;li&gt;HUP （重新加载配置文件，用新的配置文件启动新worker进程，并优雅的关闭旧的worker进程，可作为 reload 生效新配置）&lt;/li&gt;
&lt;li&gt;USR1 （重新打开日志文件，可作为日志切割处理）&lt;/li&gt;
&lt;li&gt;USR2 （平滑的升级nginx二进制文件，可作为无缝平滑升级过渡）&lt;/li&gt;
&lt;li&gt;WINCH （优雅的关闭worker进程，master进程仍在监听服务）&lt;/li&gt;
&lt;/ul&gt;

&lt;h5&gt;对于 work 进程而言：&lt;/h5&gt;

&lt;p&gt;其实 master 进程即可对 work 进行管理，但这里指的是使用信号单独对 work 进程做处理,主要包括：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;TERM / INT&lt;/li&gt;
&lt;li&gt;QUIT&lt;/li&gt;
&lt;li&gt;USR1&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;p&gt;这里主要测试说明两种之前使用较少的 无缝平滑升级二进制文件 和 升级后如有异常的回滚 操作：&lt;/p&gt;

&lt;h5&gt;无缝平滑升级二进制文件方式&lt;/h5&gt;

&lt;p&gt;不管对于升级Nginx到一个新的版本，或新增 / 更新 nginx module的时候，都难免需要替换Nginx 的二进制文件，所谓想无缝更新文件而不想对用户或对服务有任何请求失败或丢失的影响，这里可以借助 Nginx 的 USR2 信号处理。&lt;/p&gt;

&lt;p&gt;首先，编译生成新的二进制文件（只需 configure / make 即可），通常编译后默认会在 objs/nginx 直接覆盖旧的二进制文件后，对现有 master 进程发送 USR2 信号，此时现有 master 进程会将自己之前的 pid 文件重命名为 pid.oldbin&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://lifecycles.b0.upaiyun.com/nginx-pid.png!fw600&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;同时执行新的 nginx 二进制文件并启动新的 master 进程，此时会同时存在运行 2 个 Nginx 实例即 2 组的新旧 master / work 进程同时处理请求。截图如下:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://lifecycles.b0.upaiyun.com/nginx-upgrade.png!fw600&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;这时只需将旧的 Nginx 实例的 master 直接优雅退出便可完成版本升级，即：kill -quit &lt;code&gt;ca/usr/local/nginx/logs/nginx.pid.oldbin&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;但建议暂且还是先不要将旧的 master 进程，以防新升级的版本有异常问题可以快速的回滚旧实例上，详见下面的回滚操作&lt;/p&gt;

&lt;h5&gt;新服务异常回滚操作&lt;/h5&gt;

&lt;p&gt;接上，建议采用 kill -winch &lt;code&gt;ca/usr/local/nginx/logs/nginx.pid.oldbin&lt;/code&gt; 的方式只先将旧的 Nginx 实例的 work 进程优雅关闭退出，而非直接 quit 连旧的 Nginx 实例的 master 进程也优雅退出。&lt;/p&gt;

&lt;p&gt;因为这样此时旧的 Nginx 实例的 master 进程还在运行着也意味着仍在监听着 socket 服务，这样一旦新版本二进制服务有异常问题时，仍可以快速的回滚旧的 Nginx 实例来提供服务，只需对旧实例的 master 进程发送 HUP 信号，此时它就会再次唤起启动 work 进程来处理请求服务，同时发送 QUIT 信号到新 Nginx 实例的 master 进程关闭退出，一切就又回滚恢复到没有更新升级前的状态。&lt;/p&gt;

&lt;p&gt;当然一切顺利的话，在 1 的情况下便可直接将 旧实例的 master 进程 QUIT 优雅的退出关闭，完全由新实例来提供服务处理请求。&lt;/p&gt;
</description>
        <pubDate>Fri, 27 Sep 2013 19:30:00 +0800</pubDate>
        <link>salogs.yousri.org/2013/09/27/upgrade-nginx-and-about-signal-processing/</link>
        <guid isPermaLink="true">salogs.yousri.org/2013/09/27/upgrade-nginx-and-about-signal-processing/</guid>
      </item>
    
      <item>
        <title>改善工具配置简单操作运维</title>
        <description>&lt;p&gt;记录分享下自己日常工作中使用的到一些工具如ssh、tmux、terminator等按个人习惯对其做了相应配置以保持简洁傻瓜式方便。&lt;/p&gt;

&lt;p&gt;其中涉及到的配置文件主要有&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ssh的用户配置文件$HOME/.ssh/config&lt;/li&gt;
&lt;li&gt;tmux的$HOME/.tmux.conf&lt;/li&gt;
&lt;li&gt;terminator终端工具配置文件$HOME/.config/terminator/config&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;以及可能涉及到$HOME/.bashrc等&lt;/p&gt;

&lt;h5&gt;修改配置$HOME/.ssh/config让你生活更简单（省心省事）&lt;/h5&gt;

&lt;p&gt;通常默认情况我们使用以下方式ssh连接：&lt;/p&gt;

&lt;pre&gt;$ssh username@hostname/ip -p port&lt;/pre&gt;

&lt;p&gt;机器一多的话每次都要输入一串便会令人感觉繁琐，如果再加上实现没有使用ssh-copy-id功能采用公密钥认证方式登陆的话，每次都还要手动输入密码的话就更浪费时间。&lt;/p&gt;

&lt;p&gt;改善后，很多人或许会想到结合$HOME/.bashrc的别名alias功能，在此配置文件添加相应的别名如下：&lt;/p&gt;

&lt;pre&gt;alias name=&#39;ssh username@hostname/ip -p port&#39;&lt;/pre&gt;

&lt;p&gt;其实这里如果知道&lt;code&gt;ssh_config&lt;/code&gt;这东西的话，可以直接修改$HOME/.ssh/config如下:
&lt;pre&gt;
host name
hostname hostip
user username
port port
&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;如此一来，你只需要使用命令&lt;code&gt;ssh name&lt;/code&gt;连接管理。或许你也发现这样一来ssh还是需要每次重复输入，是的，所以可以结合前面的$HOME/.bashrc别名进一步处理。&lt;/p&gt;

&lt;p&gt;单独创建一个ssh连接的别名文件为：$HOME/.ssh/bashrc 内容类似于：&lt;/p&gt;

&lt;pre&gt;alias name=&#39;ssh name&#39;&lt;/pre&gt;

&lt;p&gt;然后将此文件加载到用户目录下的bashrc配置文件结尾，编辑$HOME/.bashrc后，执行source $HOME/.bashrc使其生效：&lt;/p&gt;

&lt;pre&gt;source $HOME/.ssh/bashrc&lt;/pre&gt;

&lt;p&gt;这样以后就只需输入相应的name（如个人这里取地区名称简写加ip末尾为name）回车执行即可。&lt;/p&gt;

&lt;h5&gt;再结合一些小工具如tmux/screen的可以更方便管理操作&lt;/h5&gt;

&lt;p&gt;关于这些小工具想必都比较清楚，这里记录个人下使用的配置文件：&lt;a href=&quot;https://gist.github.com/3950948&quot;&gt;$HOME/.tmux.conf&lt;/a&gt;&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/Yousri/3950948.js&quot;&gt;&lt;/script&gt;

&lt;h5&gt;终端建议改用Terminator，至于原因个人觉得其支持的功能更强大，特别其group功能相当的方便。&lt;/h5&gt;

&lt;p&gt;这个是自己对Terminator做了写改动后的配置文件:&lt;a href=&quot;https://gist.github.com/3950895&quot;&gt;$HOME/.config/terminator/config&lt;/a&gt;&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/Yousri/3950895.js&quot;&gt;&lt;/script&gt;
</description>
        <pubDate>Sun, 28 Oct 2012 00:07:00 +0800</pubDate>
        <link>salogs.yousri.org/2012/10/28/how-to-keep-it-simple-stupid-with-ssh-tmux-terminator-config-file/</link>
        <guid isPermaLink="true">salogs.yousri.org/2012/10/28/how-to-keep-it-simple-stupid-with-ssh-tmux-terminator-config-file/</guid>
      </item>
    
  </channel>
</rss>